// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onkarbanerjee/roundbalancer/pkg/backend (interfaces: Pool)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_pool.go -package=mocks -typed github.com/onkarbanerjee/roundbalancer/pkg/backend Pool
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	backend "github.com/onkarbanerjee/roundbalancer/pkg/backend"
	gomock "go.uber.org/mock/gomock"
)

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// GetAllBackends mocks base method.
func (m *MockPool) GetAllBackends() []backend.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBackends")
	ret0, _ := ret[0].([]backend.Backend)
	return ret0
}

// GetAllBackends indicates an expected call of GetAllBackends.
func (mr *MockPoolMockRecorder) GetAllBackends() *MockPoolGetAllBackendsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBackends", reflect.TypeOf((*MockPool)(nil).GetAllBackends))
	return &MockPoolGetAllBackendsCall{Call: call}
}

// MockPoolGetAllBackendsCall wrap *gomock.Call
type MockPoolGetAllBackendsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolGetAllBackendsCall) Return(arg0 []backend.Backend) *MockPoolGetAllBackendsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolGetAllBackendsCall) Do(f func() []backend.Backend) *MockPoolGetAllBackendsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolGetAllBackendsCall) DoAndReturn(f func() []backend.Backend) *MockPoolGetAllBackendsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHealthyBackends mocks base method.
func (m *MockPool) GetHealthyBackends() []backend.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthyBackends")
	ret0, _ := ret[0].([]backend.Backend)
	return ret0
}

// GetHealthyBackends indicates an expected call of GetHealthyBackends.
func (mr *MockPoolMockRecorder) GetHealthyBackends() *MockPoolGetHealthyBackendsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthyBackends", reflect.TypeOf((*MockPool)(nil).GetHealthyBackends))
	return &MockPoolGetHealthyBackendsCall{Call: call}
}

// MockPoolGetHealthyBackendsCall wrap *gomock.Call
type MockPoolGetHealthyBackendsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolGetHealthyBackendsCall) Return(arg0 []backend.Backend) *MockPoolGetHealthyBackendsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolGetHealthyBackendsCall) Do(f func() []backend.Backend) *MockPoolGetHealthyBackendsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolGetHealthyBackendsCall) DoAndReturn(f func() []backend.Backend) *MockPoolGetHealthyBackendsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
