// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onkarbanerjee/roundbalancer/pkg/backends (interfaces: GroupOfBackends)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_pool.go -package=mocks -typed github.com/onkarbanerjee/roundbalancer/pkg/backends GroupOfBackends
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	backends "github.com/onkarbanerjee/roundbalancer/pkg/backends"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupOfBackends is a mock of GroupOfBackends interface.
type MockGroupOfBackends struct {
	ctrl     *gomock.Controller
	recorder *MockGroupOfBackendsMockRecorder
	isgomock struct{}
}

// MockGroupOfBackendsMockRecorder is the mock recorder for MockGroupOfBackends.
type MockGroupOfBackendsMockRecorder struct {
	mock *MockGroupOfBackends
}

// NewMockGroupOfBackends creates a new mock instance.
func NewMockGroupOfBackends(ctrl *gomock.Controller) *MockGroupOfBackends {
	mock := &MockGroupOfBackends{ctrl: ctrl}
	mock.recorder = &MockGroupOfBackendsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupOfBackends) EXPECT() *MockGroupOfBackendsMockRecorder {
	return m.recorder
}

// GetAllBackends mocks base method.
func (m *MockGroupOfBackends) GetAllBackends() []*backends.Backend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBackends")
	ret0, _ := ret[0].([]*backends.Backend)
	return ret0
}

// GetAllBackends indicates an expected call of GetAllBackends.
func (mr *MockGroupOfBackendsMockRecorder) GetAllBackends() *MockGroupOfBackendsGetAllBackendsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBackends", reflect.TypeOf((*MockGroupOfBackends)(nil).GetAllBackends))
	return &MockGroupOfBackendsGetAllBackendsCall{Call: call}
}

// MockGroupOfBackendsGetAllBackendsCall wrap *gomock.Call
type MockGroupOfBackendsGetAllBackendsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupOfBackendsGetAllBackendsCall) Return(arg0 []*backends.Backend) *MockGroupOfBackendsGetAllBackendsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupOfBackendsGetAllBackendsCall) Do(f func() []*backends.Backend) *MockGroupOfBackendsGetAllBackendsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupOfBackendsGetAllBackendsCall) DoAndReturn(f func() []*backends.Backend) *MockGroupOfBackendsGetAllBackendsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
