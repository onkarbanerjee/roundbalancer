// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onkarbanerjee/roundbalancer/pkg/loadbalancer (interfaces: LoadBalancer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_loadbalancer.go -package=mocks -typed github.com/onkarbanerjee/roundbalancer/pkg/loadbalancer LoadBalancer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	backends "github.com/onkarbanerjee/roundbalancer/pkg/backends"
	gomock "go.uber.org/mock/gomock"
)

// MockLoadBalancer is a mock of LoadBalancer interface.
type MockLoadBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerMockRecorder
	isgomock struct{}
}

// MockLoadBalancerMockRecorder is the mock recorder for MockLoadBalancer.
type MockLoadBalancerMockRecorder struct {
	mock *MockLoadBalancer
}

// NewMockLoadBalancer creates a new mock instance.
func NewMockLoadBalancer(ctrl *gomock.Controller) *MockLoadBalancer {
	mock := &MockLoadBalancer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancer) EXPECT() *MockLoadBalancerMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockLoadBalancer) Next() (*backends.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*backends.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockLoadBalancerMockRecorder) Next() *MockLoadBalancerNextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockLoadBalancer)(nil).Next))
	return &MockLoadBalancerNextCall{Call: call}
}

// MockLoadBalancerNextCall wrap *gomock.Call
type MockLoadBalancerNextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoadBalancerNextCall) Return(arg0 *backends.Backend, arg1 error) *MockLoadBalancerNextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoadBalancerNextCall) Do(f func() (*backends.Backend, error)) *MockLoadBalancerNextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoadBalancerNextCall) DoAndReturn(f func() (*backends.Backend, error)) *MockLoadBalancerNextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
